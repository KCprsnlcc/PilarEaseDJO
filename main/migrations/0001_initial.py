# Generated by Django 4.2.20 on 2025-03-17 14:06

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('student_id', models.CharField(max_length=10, unique=True)),
                ('full_name', models.CharField(max_length=100)),
                ('academic_year_level', models.CharField(max_length=20)),
                ('contact_number', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('is_counselor', models.BooleanField(default=False)),
                ('block_reason', models.CharField(blank=True, max_length=255, null=True)),
                ('block_duration', models.IntegerField(blank=True, null=True)),
                ('is_itrc_staff', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('deactivated', 'Deactivated')], default='pending', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_set', related_query_name='customuser', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_set', related_query_name='customuser', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('last_message_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('counselor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counselor_chats', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_chats', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ContactUs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reply', models.TextField(blank=True, null=True)),
                ('is_replied', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('csv_file', models.FileField(upload_to='datasets/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('error_log', models.TextField(blank=True, null=True)),
                ('progress', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='processing', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Emoji',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('emoji', models.TextField(null=True)),
                ('name', models.TextField(null=True)),
                ('group', models.TextField(null=True)),
                ('sub_group', models.TextField(null=True)),
                ('codepoints', models.TextField(null=True)),
            ],
            options={
                'ordering': ['sub_group'],
            },
        ),
        migrations.CreateModel(
            name='NLTKResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='No nltk downloaded', max_length=100, unique=True)),
                ('is_downloaded', models.BooleanField(default=False)),
                ('download_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProfanityWord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word_list', models.JSONField(default=list)),
            ],
            options={
                'verbose_name': 'Profanity Word',
                'verbose_name_plural': 'Profanity Words',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expire_date', models.DateTimeField()),
                ('session_end', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('bio', models.TextField(blank=True, null=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('new_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('email_change_requested_at', models.DateTimeField(blank=True, null=True)),
                ('email_verification_requested_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserNotificationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_clicked_notification', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TextAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_data', models.JSONField(blank=True, null=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='text_analyses', to='main.dataset')),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('plain_description', models.TextField()),
                ('emotion', models.CharField(max_length=50)),
                ('anger', models.FloatField(default=0)),
                ('disgust', models.FloatField(default=0)),
                ('fear', models.FloatField(default=0)),
                ('neutral', models.FloatField(default=0)),
                ('happiness', models.FloatField(default=0)),
                ('sadness', models.FloatField(default=0)),
                ('surprise', models.FloatField(default=0)),
                ('anger_percentage', models.IntegerField(default=0)),
                ('disgust_percentage', models.IntegerField(default=0)),
                ('fear_percentage', models.IntegerField(default=0)),
                ('neutral_percentage', models.IntegerField(default=0)),
                ('happiness_percentage', models.IntegerField(default=0)),
                ('sadness_percentage', models.IntegerField(default=0)),
                ('surprise_percentage', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent_reply', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nested_replies', to='main.reply')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='main.status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('highlighted_title', models.TextField(blank=True)),
                ('highlighted_description', models.TextField(blank=True)),
                ('referral_reason', models.CharField(default='Not specified', max_length=255)),
                ('other_reason', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('referred_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals', to=settings.AUTH_USER_MODEL)),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.status')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionnaireProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_question_index', models.IntegerField(default=0)),
                ('completed', models.BooleanField(default=False)),
                ('emotion_data', models.JSONField(blank=True, null=True)),
                ('normalized_emotions', models.JSONField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accuracy', models.FloatField()),
                ('precision', models.FloatField()),
                ('recall', models.FloatField()),
                ('f1_score', models.FloatField()),
                ('confusion_matrix_image', models.TextField()),
                ('classification_report_html', models.TextField()),
                ('classification_report_csv', models.TextField()),
                ('processed_csv_file', models.FileField(blank=True, null=True, upload_to='processed_datasets/')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('dataset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='performance_result', to='main.dataset')),
            ],
        ),
        migrations.CreateModel(
            name='NotificationCounselor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('link', models.URLField(blank=True, max_length=500, null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='counselor_notifications', to='main.status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counselor_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(blank=True, choices=[('mention', 'Mention'), ('reply', 'Reply'), ('status', 'Status'), ('summary_replies', 'Summary Replies')], max_length=100, null=True)),
                ('message', models.CharField(blank=True, max_length=255, null=True)),
                ('link', models.URLField(blank=True, max_length=500, null=True)),
                ('avatar', models.URLField(blank=True, max_length=500, null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reply', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reply_notifications', to='main.reply')),
                ('status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='status_notifications', to='main.status')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'notification_type', 'status', 'reply')},
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('sentiment_score', models.IntegerField(default=0)),
                ('is_approved', models.BooleanField(default=False)),
                ('is_excluded', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EmailHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_history', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_bot_message', models.BooleanField(default=False)),
                ('message_type', models.CharField(blank=True, choices=[('greeting', 'Greeting'), ('question', 'Question'), ('bot_message', 'Bot Message'), ('user_message', 'User Message'), ('counselor_message', 'Counselor Message')], max_length=50, null=True)),
                ('question_index', models.IntegerField(blank=True, null=True)),
                ('anger', models.FloatField(blank=True, null=True)),
                ('disgust', models.FloatField(blank=True, null=True)),
                ('fear', models.FloatField(blank=True, null=True)),
                ('happiness', models.FloatField(blank=True, null=True)),
                ('sadness', models.FloatField(blank=True, null=True)),
                ('surprise', models.FloatField(blank=True, null=True)),
                ('neutral', models.FloatField(blank=True, null=True)),
                ('anger_percentage', models.IntegerField(blank=True, null=True)),
                ('disgust_percentage', models.IntegerField(blank=True, null=True)),
                ('fear_percentage', models.IntegerField(blank=True, null=True)),
                ('happiness_percentage', models.IntegerField(blank=True, null=True)),
                ('sadness_percentage', models.IntegerField(blank=True, null=True)),
                ('surprise_percentage', models.IntegerField(blank=True, null=True)),
                ('neutral_percentage', models.IntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReplyNotification',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.notification')),
                ('replied_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reply_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('main.notification',),
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255)),
                ('answer', models.TextField(default='No answer provided')),
                ('response', models.TextField(default='No response provided')),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('answer_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'question')},
            },
        ),
        migrations.CreateModel(
            name='CounselorMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('chat_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='main.chatsession')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['chat_session', 'timestamp'], name='main_counse_chat_se_96d9ba_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='chatsession',
            index=models.Index(fields=['user', 'counselor', 'is_active'], name='main_chatse_user_id_1ebff8_idx'),
        ),
        migrations.AddIndex(
            model_name='chatsession',
            index=models.Index(fields=['last_message_at'], name='main_chatse_last_me_250041_idx'),
        ),
    ]
